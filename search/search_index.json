{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"vscode.py","text":"<p>Create vscode extensions with python.</p>"},{"location":"#why-use-this","title":"Why use this?","text":"<p>Why should you use this for building VScode extensions when you can use typescript? Here are some reasons:</p> <ul> <li>vscode.py builds the package.json for you! No need to switch between your extension.py and package.json in order to add commands. It also handles adding Activity Bars, Keybinds and Views.</li> <li>vscode.py provides a more pythonic way of creating the extension. Python also has some powerful modules that Javascript doesn't and you can include these with vscode.py</li> <li>vscode.py extensions work perfectly with vsce and you can publish your extensions just like you would publish any other extension.</li> </ul>"},{"location":"#extensions-built-using-vscodepy","title":"Extensions built using vscode.py","text":"<p>Here's a list of some extensions built using vscode.py. If you'd like to include your extension here feel free to create a PR.</p> <ul> <li>Youtube</li> <li>Wikipedia</li> <li>Internet Search</li> <li>Virtual Assistant</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#200","title":"[2.0.0]","text":"<ul> <li>Complete async rewrite</li> </ul>"},{"location":"changelog/#154","title":"[1.5.4]","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>No errors being logged when there is an error in the js file.</li> <li>ActiveTextEditor raising error instead of undefined</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li><code>vscode.ext</code> has now been deprecated and will be removed by 1.6.0, all of the ext functions/classes can now be accessed through <code>vscode</code> directly.</li> </ul>"},{"location":"changelog/#153-2021-08-01","title":"[1.5.3] - 2021-08-01","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>vscode.window.show_text_document</li> <li>context managers with vscode.window.set_status_bar_message</li> </ul>"},{"location":"changelog/#152-2021-07-31","title":"[1.5.2] - 2021-07-31","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>This CHANGELOG file</li> <li>Workspace Configurations</li> <li>Documentation</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>main.js not being included in packages</li> </ul>"},{"location":"creating-your-extension/","title":"Creating your first extension","text":""},{"location":"creating-your-extension/#guide","title":"Guide","text":""},{"location":"creating-your-extension/#step-1","title":"Step 1","text":"<p>Create a python file inside a folder.</p> <p></p>"},{"location":"creating-your-extension/#step-2","title":"Step 2","text":"<p>Write the code for your extension. For this guide we will use this code:</p> <pre><code>import vscode\nfrom vscode import InfoMessage\n\next = vscode.Extension(name=\"Test Extension\")\n\n@ext.event\nasync def on_activate():\n    vscode.log(f\"The Extension '{ext.name}' has started\")\n\n\n@ext.command()\nasync def hello_world(ctx):\n    return await ctx.show(InfoMessage(f\"Hello World from {ext.name}\"))\n\next.run()\n</code></pre>"},{"location":"creating-your-extension/#step-3","title":"Step 3","text":"<p>Run the python file. It will build the files.</p> <p> </p>"},{"location":"creating-your-extension/#step-4","title":"Step 4","text":"<p>Press F5. This will run the extension and open a new vscode window in development mode.</p>"},{"location":"creating-your-extension/#step-5","title":"Step 5","text":"<p>Finally, test your command.</p> <ul> <li>Open the command palette with Ctrl+P in the development window.</li> </ul> <p></p> <ul> <li>Type <code>&gt;Hello World</code></li> </ul> <p></p> <ul> <li>It should show a popup like this in the bottom right corner</li> </ul> <p></p>"},{"location":"getting-started/","title":"Installation","text":""},{"location":"getting-started/#with-pip-recommended","title":"with pip recommended","text":"<p>The latest stable release of vscode.py can be installed with <code>pip</code>:</p> <pre><code>pip install vscode.py\n</code></pre> <p>However if you want the latest working version from github you can:</p> <pre><code>pip install git+https://github.com/codewithswastik/vscode.py.git\n</code></pre>"},{"location":"getting-started/#with-git","title":"with git","text":"<p>vscode.py can be directly used from GitHub by cloning the repository which might be useful if you want to use the working version:</p> <pre><code>git clone https://github.com/codewithswastik/vscode.py.git\n</code></pre>"},{"location":"publish-your-extension/","title":"Publishing Extensions","text":"<p>In order to publish your extension created with vscode.py you should run your extension file with the publish flag as follows:</p> <pre><code>python extension.py --publish\n</code></pre> <p>This will generate the <code>README.md</code> and <code>CHANGELOG.md</code> for your extension. It's important to keep these updated. It will also create the <code>.vscodeignore</code> file. The contents of this file will be removed from being packaged in your extension.</p> <p>After this you have to follow the steps mentioned in the official documentation for publishing extensions.</p>"},{"location":"documentation/commands/","title":"Command","text":"<p>A class that implements the protocol for commands that can be used via the command palette. These should not be created manually, instead they should be created via the decorator or functional interface.</p>"},{"location":"documentation/commands/#vscode.Command.__init__","title":"<code>__init__(name, func, ext, title=None, category=None, keybind=None, when=None)</code>","text":"<p>Initialize a command. Args:     name:          The internal name of the command.     func:          The function to register as a command.     ext:          The extension this command is registered in.     title:          The title of the command. This is shown in the command palette.     category:          The category that this command belongs to.     keybind:          The keybind for this command.     when:          A condition for when keybinds should be functional.</p>"},{"location":"documentation/commands/#context","title":"Context","text":"<p>Represents the context in which a command is being invoked under.</p> <p>This class is not created manually and is instead passed around to commands as the first parameter.</p> <p>This class is the python equivalent of the <code>vscode</code> module in the JavaScript API i.e. vscode.window becomes context.window and so on.</p>"},{"location":"documentation/config/","title":"Configuration","text":""},{"location":"documentation/config/#example","title":"Example","text":""},{"location":"documentation/config/#code","title":"Code","text":"<pre><code>import vscode\nfrom vscode import Config, InfoMessage\n\nc = Config(name='Say', description='Say Something!', input_type=str, default=\"Hello World!\")\next = vscode.Extension(name='Speaker', config=[c])\n\n@ext.command()\nasync def message_say_config(ctx):\n    say_value = await ctx.workspace.get_config_value(c)\n    await ctx.window.show(InfoMessage(say_value))\n\next.run()\n</code></pre>"},{"location":"documentation/config/#result","title":"Result","text":""},{"location":"documentation/config/#workspace-configurations","title":"Workspace Configurations","text":""},{"location":"documentation/enums/","title":"Enums","text":""},{"location":"documentation/enums/#vscode.enums.ViewColumn","title":"<code>ViewColumn</code>","text":"<p>             Bases: <code>IntEnum</code></p> <p>Represents where a view should be shown in the editor.</p>"},{"location":"documentation/extension/","title":"Extension","text":"<p>Represents a vscode extension.</p>"},{"location":"documentation/extension/#vscode.Extension.command","title":"<code>command(name=None, title=None, category=None, keybind=None, when=None)</code>","text":"<p>A decorator for registering commands. Args:     name:          The internal name of the command.     title:          The title of the command. This is shown in the command palette.     category:          The category that this command belongs to.         Default categories set by Extensions will be overriden if this is not None.         False should be passed in order to override a default category.     keybind:          The keybind for this command.     when:          A condition for when keybinds should be functional.</p>"},{"location":"documentation/extension/#vscode.Extension.event","title":"<code>event(func)</code>","text":"<p>A decorator for registering event handlers.</p>"},{"location":"documentation/extension/#vscode.Extension.register_command","title":"<code>register_command(func, name=None, title=None, category=None, keybind=None, when=None)</code>","text":"<p>Register a command. This is usually not called, instead the command() shortcut decorators should be used instead. Args:     func:          The function to register as a command.     name:          The internal name of the command.     title:          The title of the command. This is shown in the command palette.     category:          The category that this command belongs to.         Default categories set by Extensions will be overriden if this is not None.         False should be passed in order to override a default category.     keybind:          The keybind for this command.     when:          A condition for when keybinds should be functional.</p>"},{"location":"documentation/extension/#vscode.Extension.register_keybind","title":"<code>register_keybind(command)</code>","text":"<p>A method called internally to register a keybind.</p>"},{"location":"documentation/extension/#vscode.Extension.set_default_category","title":"<code>set_default_category(category)</code>","text":"<p>Set a default category for new commands. Args:     category: The name of the default category.</p>"},{"location":"documentation/objects/","title":"Objects","text":""},{"location":"documentation/objects/#vscode.objects.Object","title":"<code>Object</code>","text":"<p>Represents a generic vscode object.</p>"},{"location":"documentation/objects/#vscode.objects.QuickPickOptions","title":"<code>QuickPickOptions</code>","text":"<p>             Bases: <code>Object</code></p> <p>Options to configure the behavior of the quick pick UI.</p>"},{"location":"documentation/objects/#vscode.objects.QuickPickOptions.__init__","title":"<code>__init__(title=None, can_pick_many=None, ignore_focus_out=None, match_on_description=None, place_holder=None, match_on_detail=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>title</code> <code>Optional[str]</code> <p>An optional string that represents the title of the quick pick.</p> <code>None</code> <code>can_pick_many</code> <code>Optional[bool]</code> <p>An optional flag to make the picker accept multiple selections, if true the result is an array of picks.</p> <code>None</code> <code>ignore_focus_out</code> <code>Optional[bool]</code> <p>Set to True to keep the input box open when focus moves to another part of the editor or to another window. This setting is ignored on iPad and is always False.</p> <code>None</code> <code>place_holder</code> <code>Optional[str]</code> <p>An optional string to show as placeholder in the input box to guide the user what to type.</p> <code>None</code> <code>match_on_description</code> <code>Optional[bool]</code> <p>An optional flag to include the description when filtering the picks.</p> <code>None</code> <code>match_on_detail</code> <code>Optional[bool]</code> <p>An optional flag to include the detail when filtering the picks.</p> <code>None</code>"},{"location":"documentation/objects/#vscode.objects.Selection","title":"<code>Selection</code>","text":"<p>             Bases: <code>Range</code></p> <p>Represents a text selection in an editor.</p>"},{"location":"documentation/window/","title":"Window","text":""},{"location":"documentation/window/#vscode.window.TextEditor","title":"<code>TextEditor</code>","text":""},{"location":"documentation/window/#vscode.window.TextEditor.cursor","title":"<code>cursor: Position</code>  <code>property</code>","text":"<p>The cursor position of the 1st selection.</p>"}]}